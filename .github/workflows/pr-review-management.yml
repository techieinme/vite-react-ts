name: PR Review Management

on:
  pull_request:
    types: [opened, synchronize]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  workflow_dispatch:

jobs:
  manage-reviews:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm ci || npm install
          npm install axios eslint --save-dev

      # --- Step 1: Gather PR details & comments ---
      - name: Get PR Details and Comments
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            let prNumber;
            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
            } else if (context.eventName === 'issue_comment') {
              if (!context.payload.issue.pull_request) return;
              prNumber = context.payload.issue.number;
            } else if (context.eventName === 'pull_request_review_comment') {
              prNumber = context.payload.pull_request.number;
            } else {
              return;
            }

            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const issueComments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            const reviewComments = await github.rest.pulls.listReviewComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const totalComments = issueComments.data.length + reviewComments.data.length;

            return JSON.stringify({
              commentCount: totalComments,
              prUrl: pr.data.html_url,
              title: pr.data.title,
              prNumber,
              currentReviewers: pr.data.requested_reviewers?.map(r => r.login) || []
            });

      # --- Step 2: Run ESLint ---
      - name: Run ESLint
        run: |
          npx eslint "src/**/*.{ts,tsx}" -f json -o eslint-report.json || true

      # --- Step 3: Comment ESLint issues in PR ---
      - name: Comment ESLint Issues
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'eslint-report.json';
            if (!fs.existsSync(path)) {
              console.log("No ESLint report generated");
              return;
            }

            const report = JSON.parse(fs.readFileSync(path, 'utf8'));
            if (report.length === 0) {
              console.log("✅ No ESLint issues found");
              return;
            }

            let body = "### ⚠️ ESLint Issues Found\n\n";
            for (const file of report) {
              if (file.messages.length > 0) {
                body += `**${file.filePath.replace(process.cwd() + '/', '')}**\n`;
                for (const msg of file.messages) {
                  body += `- Line ${msg.line}:${msg.column} → ${msg.message} (${msg.ruleId})\n`;
                }
                body += "\n";
              }
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

            // Mark job as failed so CI blocks merge
            core.setFailed("ESLint issues detected. Please fix before merging.");

      # --- Step 4: Manage Reviewers ---
      - name: Manage Reviewers
        if: ${{ steps.pr-details.outputs.result != '' }}
        uses: actions/github-script@v7
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          COMMENT_THRESHOLD: 5
          PR_DETAILS: ${{ steps.pr-details.outputs.result }}
        with:
          script: |
            const axios = require('axios');
            const prDetails = JSON.parse(process.env.PR_DETAILS);

            const reviewers = {
              senior: [
                { github: 'senior-dev1', slack: 'U123ABC' },
                { github: 'senior-dev2', slack: 'U456DEF' }
              ],
              junior: [
                { github: 'junior-dev1', slack: 'U789GHI' },
                { github: 'junior-dev2', slack: 'U012JKL' }
              ]
            };

            if (prDetails.commentCount > process.env.COMMENT_THRESHOLD) {
              const newReviewers = reviewers.senior
                .map(r => r.github)
                .filter(r => !prDetails.currentReviewers.includes(r));

              if (newReviewers.length > 0) {
                await github.rest.pulls.requestReviewers({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prDetails.prNumber,
                  reviewers: newReviewers
                });

                const reviewerMentions = newReviewers.map(r => '@' + r).join(' ');
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prDetails.prNumber,
                  body: `👀 High activity detected (${prDetails.commentCount} comments). Requesting senior review from: ${reviewerMentions}`
                });

                for (const reviewer of reviewers.senior.filter(r => newReviewers.includes(r.github))) {
                  await axios.post(process.env.SLACK_WEBHOOK, {
                    text: `Hey <@${reviewer.slack}> 👋 You've been added as a reviewer to PR: ${prDetails.title}\n${prDetails.prUrl}`
                  });
                }
              }
            }
